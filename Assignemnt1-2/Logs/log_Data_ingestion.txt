2025-03-02 12:44:01,179 - INFO - Starting data load
2025-03-02 12:44:03,237 - INFO - Data load completed successfully
2025-03-02 12:44:03,237 - INFO - Sample data:
2025-03-02 12:44:05,116 - INFO - Row(reviewerID='A27BTSGLXK2C5K', asin='B017O9P72A', reviewText="Alexa is not able to control my lights. If I ask her to tell me what LIFX can do, she will give me an example with one of my group names. If I use that exact same group name in a new request, she'll await that she doesn't recognize the name. This skill is VERY buggy and has not yet worked for me. I even rest Alexa, uninstalled LIFX, and set everything up again.", overall=1.0, unixReviewTime=1449792000, summary="VERY Buggy, doesn't work.", verified='false', vote=None, reviewTime='12 11, 2015', reviewerName='Jacob M. Wessler')
2025-03-02 12:44:05,117 - INFO - Row(reviewerID='A27ZJ1NCBFP1HZ', asin='B017O9P72A', reviewText='Alexa works great for me so far, but I\'m also only controlling a single bulb at the moment. Turning on/off, changing colors and adjusting brightness are all easy and quick. That being said, I\'m expecting complications as I add more bulbs (hope for the best prepare for the worst, right?)\n\nI\'d speculate that some other users\' frustrations might stem from Alexa not recognizing their bulb or room names. After simplifying my bulb name to \'Lamp\' and listing it under a Living Room group (within the LIFx app), I\'ve been able to address it by either category pretty consistently.\n"Turn on/off living room lights."\n"Change lamp light to [color]"\n"Dim living room lights to [X]%"\n\nLike any new tech, you can expect growing pains and bugs early on. Be patient. This skill isn\'t perfect by any means, but I\'d say it\'s off to a decent start', overall=4.0, unixReviewTime=1449532800, summary='So Far So Good', verified='false', vote='5', reviewTime='12 8, 2015', reviewerName='Greg')
2025-03-02 12:44:05,118 - INFO - Row(reviewerID='ACCQIOZMFN4UK', asin='B017O9P72A', reviewText="Weak!!\n\nAlexa doesn't even recognize the name Lifx.\nIt's a waste of time to even ask her to turn on and off lights", overall=1.0, unixReviewTime=1449446400, summary='Time waster', verified='false', vote='11', reviewTime='12 7, 2015', reviewerName='Da-Gr8-1')
2025-03-02 12:44:05,118 - INFO - Row(reviewerID='A3KUPJ396OQF78', asin='B017O9P72A', reviewText='Can only control one of two bulbs from one of two echos', overall=2.0, unixReviewTime=1449273600, summary='Buggy', verified='false', vote=None, reviewTime='12 5, 2015', reviewerName='Larry Russlin')
2025-03-02 12:44:05,119 - INFO - Row(reviewerID='A1U1RE1ZI19E1H', asin='B017O9P72A', reviewText='this worked great then randomly stopped. please update.', overall=1.0, unixReviewTime=1517529600, summary='stopped working', verified='false', vote='2', reviewTime='02 2, 2018', reviewerName='Rebekah')
2025-03-02 13:01:38,114 - INFO - Dataset Schema:
2025-03-02 13:01:38,117 - INFO - Number of Columns: 11
2025-03-02 13:01:38,118 - INFO - Missing Values Count (non-null counts per column):
2025-03-02 15:07:50,025 - ERROR - Error computing missing values count: An error occurred while calling o105.collectToPython
2025-03-02 15:07:50,025 - INFO - Summary Statistics for Numeric Columns:
2025-03-02 15:07:50,258 - ERROR - Error computing summary statistics: [DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE] Cannot resolve "element_at(summary, summary)" due to data type mismatch: Parameter 1 requires the ("ARRAY" or "MAP") type, however "summary" has the type "STRING".;
'Project [summary#764, element_at(reviewerID#495, summary#764, None, false) AS reviewerID#546, element_at(asin#500, summary#764, None, false) AS asin#547, element_at(reviewText#505, summary#764, None, false) AS reviewText#548, element_at(overall#510, summary#764, None, false) AS overall#549, element_at(unixReviewTime#515, summary#764, None, false) AS unixReviewTime#550, element_at(summary#764, summary#764, None, false) AS summary#551, element_at(verified#525, summary#764, None, false) AS verified#552, element_at(vote#530, summary#764, None, false) AS vote#553, element_at(reviewTime#535, summary#764, None, false) AS reviewTime#554, element_at(reviewerName#540, summary#764, None, false) AS reviewerName#555, element_at(overall_normalized#545, summary#764, None, false) AS overall_normalized#556]
+- Project [reviewerID#495, asin#500, reviewText#505, overall#510, unixReviewTime#515, summary#764, verified#525, vote#530, reviewTime#535, reviewerName#540, overall_normalized#545]
   +- Generate explode([count,mean,stddev,min,max]), false, [summary#764]
      +- Aggregate [map(cast(count as string), cast(count(reviewerID#0) as string), cast(mean as string), cast(avg(try_cast(reviewerID#0 as double)) as string), cast(stddev as string), cast(stddev(try_cast(reviewerID#0 as double)) as string), cast(min as string), cast(min(reviewerID#0) as string), cast(max as string), cast(max(reviewerID#0) as string)) AS reviewerID#495, map(cast(count as string), cast(count(asin#1) as string), cast(mean as string), cast(avg(try_cast(asin#1 as double)) as string), cast(stddev as string), cast(stddev(try_cast(asin#1 as double)) as string), cast(min as string), cast(min(asin#1) as string), cast(max as string), cast(max(asin#1) as string)) AS asin#500, map(cast(count as string), cast(count(reviewText#120) as string), cast(mean as string), cast(avg(try_cast(reviewText#120 as double)) as string), cast(stddev as string), cast(stddev(try_cast(reviewText#120 as double)) as string), cast(min as string), cast(min(reviewText#120) as string), cast(max as string), cast(max(reviewText#120) as string)) AS reviewText#505, map(cast(count as string), cast(count(overall#3) as string), cast(mean as string), cast(avg(overall#3) as string), cast(stddev as string), cast(stddev(cast(overall#3 as double)) as string), cast(min as string), cast(min(overall#3) as string), cast(max as string), cast(max(overall#3) as string)) AS overall#510, map(cast(count as string), cast(count(unixReviewTime#4L) as string), cast(mean as string), cast(avg(unixReviewTime#4L) as string), cast(stddev as string), cast(stddev(cast(unixReviewTime#4L as double)) as string), cast(min as string), cast(min(unixReviewTime#4L) as string), cast(max as string), cast(max(unixReviewTime#4L) as string)) AS unixReviewTime#515, map(cast(count as string), cast(count(summary#121) as string), cast(mean as string), cast(avg(try_cast(summary#121 as double)) as string), cast(stddev as string), cast(stddev(try_cast(summary#121 as double)) as string), cast(min as string), cast(min(summary#121) as string), cast(max as string), cast(max(summary#121) as string)) AS summary#520, map(cast(count as string), cast(count(verified#6) as string), cast(mean as string), cast(avg(try_cast(verified#6 as double)) as string), cast(stddev as string), cast(stddev(try_cast(verified#6 as double)) as string), cast(min as string), cast(min(verified#6) as string), cast(max as string), cast(max(verified#6) as string)) AS verified#525, map(cast(count as string), cast(count(vote#7) as string), cast(mean as string), cast(avg(try_cast(vote#7 as double)) as string), cast(stddev as string), cast(stddev(try_cast(vote#7 as double)) as string), cast(min as string), cast(min(vote#7) as string), cast(max as string), cast(max(vote#7) as string)) AS vote#530, map(cast(count as string), cast(count(reviewTime#8) as string), cast(mean as string), cast(avg(try_cast(reviewTime#8 as double)) as string), cast(stddev as string), cast(stddev(try_cast(reviewTime#8 as double)) as string), cast(min as string), cast(min(reviewTime#8) as string), cast(max as string), cast(max(reviewTime#8) as string)) AS reviewTime#535, map(cast(count as string), cast(count(reviewerName#9) as string), cast(mean as string), cast(avg(try_cast(reviewerName#9 as double)) as string), cast(stddev as string), cast(stddev(try_cast(reviewerName#9 as double)) as string), cast(min as string), cast(min(reviewerName#9) as string), cast(max as string), cast(max(reviewerName#9) as string)) AS reviewerName#540, map(cast(count as string), cast(count(overall_normalized#132) as string), cast(mean as string), cast(avg(overall_normalized#132) as string), cast(stddev as string), cast(stddev(overall_normalized#132) as string), cast(min as string), cast(min(overall_normalized#132) as string), cast(max as string), cast(max(overall_normalized#132) as string)) AS overall_normalized#545]
         +- Filter (cast(overall#3 as double) <= 7.971725042285259)
            +- Project [reviewerID#0, asin#1, reviewText#120, overall#3, unixReviewTime#4L, summary#121, verified#6, vote#7, reviewTime#8, reviewerName#9, (cast(overall#3 as double) / cast(5 as double)) AS overall_normalized#132]
               +- Deduplicate [reviewTime#8, reviewerID#0, asin#1, reviewText#120, reviewerName#9, unixReviewTime#4L, overall#3, vote#7, verified#6, summary#121]
                  +- Project [reviewerID#0, asin#1, coalesce(reviewText#2, cast(Unknown as string)) AS reviewText#120, overall#3, unixReviewTime#4L, coalesce(summary#5, cast(No Summary as string)) AS summary#121, verified#6, vote#7, reviewTime#8, reviewerName#9]
                     +- Relation [reviewerID#0,asin#1,reviewText#2,overall#3,unixReviewTime#4L,summary#5,verified#6,vote#7,reviewTime#8,reviewerName#9] json

2025-03-02 15:07:50,259 - INFO - Additional Summary Statistics for the Complete Dataset:
